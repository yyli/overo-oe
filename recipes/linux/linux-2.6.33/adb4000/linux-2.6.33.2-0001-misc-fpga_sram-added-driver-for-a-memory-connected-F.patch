From 8e60a6bc5c5fb74ed5d42a1f72d1847385b84a29 Mon Sep 17 00:00:00 2001
From: Benjamin Tietz <benjamin@marvin.local.in-circuit.de>
Date: Wed, 15 Dec 2010 11:35:36 +0100
Subject: [PATCH 01/18] [misc/fpga_sram] added driver for a memory-connected FPGA

The ICnova SAM9G45+XC700AN OEM has a FPGA connected to the
ARM-Chip via the Memory Interface. This driver can be used to
communicate on the ARM-Site.
---
 drivers/misc/Kconfig     |    6 +
 drivers/misc/Makefile    |    1 +
 drivers/misc/fpga_sram.c |  309 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 316 insertions(+), 0 deletions(-)
 create mode 100644 drivers/misc/fpga_sram.c

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index e3551d2..072c8a4 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -297,4 +297,10 @@ source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
 source "drivers/misc/iwmc3200top/Kconfig"
 
+config FPGA_SRAM
+	tristate "FPGA-SRAM Interface"
+	help
+	  Enable this if you need a SRAM-like interface somewhere in your
+	  mapping.
+
 endif # MISC_DEVICES
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 049ff24..61fe337 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -26,5 +26,6 @@ obj-$(CONFIG_DS1682)		+= ds1682.o
 obj-$(CONFIG_TI_DAC7512)	+= ti_dac7512.o
 obj-$(CONFIG_C2PORT)		+= c2port/
 obj-$(CONFIG_IWMC3200TOP)      += iwmc3200top/
+obj-$(CONFIG_FPGA_SRAM)		+= fpga_sram.o
 obj-y				+= eeprom/
 obj-y				+= cb710/
diff --git a/drivers/misc/fpga_sram.c b/drivers/misc/fpga_sram.c
new file mode 100644
index 0000000..ca98598
--- /dev/null
+++ b/drivers/misc/fpga_sram.c
@@ -0,0 +1,309 @@
+/*
+ * main.c -- the bare fpga_sram char module
+ *
+ * Based on scull
+ * Copyright (C) 2001 Alessandro Rubini and Jonathan Corbet
+ * Copyright (C) 2001 O'Reilly & Associates
+ *
+ * The source code in this file can be freely used, adapted,
+ * and redistributed in source or binary form, so long as an
+ * acknowledgment appears in derived source files.  The citation
+ * should list that the code comes from the book "Linux Device
+ * Drivers" by Alessandro Rubini and Jonathan Corbet, published
+ * by O'Reilly & Associates.   No warranty is attached;
+ * we cannot take responsibility for errors or fitness for use.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+
+#include <linux/kernel.h>	/* printk() */
+#include <linux/slab.h>		/* kmalloc() */
+#include <linux/fs.h>		/* everything... */
+#include <linux/errno.h>	/* error codes */
+#include <linux/types.h>	/* size_t */
+#include <linux/proc_fs.h>
+#include <linux/fcntl.h>	/* O_ACCMODE */
+#include <linux/seq_file.h>
+#include <linux/cdev.h>
+
+#include <asm/system.h>		/* cli(), *_flags */
+#include <asm/uaccess.h>	/* copy_*_user */
+
+#define FPGA_MAJOR	0
+#define FPGA_NR_DEVS	1
+
+
+struct fpga_sram_drv;
+
+struct fpga_sram_dev {
+	struct fpga_sram_drv *drv;
+	struct cdev cdev;
+};
+
+struct fpga_sram_drv {
+	struct fpga_sram_dev *devices;
+	void *start;
+	int size;
+	int major;
+	int devs;
+};
+
+static int fpga_sram_major = FPGA_MAJOR;
+static int fpga_sram_minor = 0;
+static int fpga_sram_nr_devs = FPGA_NR_DEVS;
+
+module_param(fpga_sram_major, int, S_IRUGO);
+module_param(fpga_sram_minor, int, S_IRUGO);
+//module_param(fpga_sram_nr_devs, int, S_IRUGO);
+
+MODULE_AUTHOR("Benjamin Tietz");
+MODULE_LICENSE("Dual BSD/GPL");
+
+
+/*
+ * Open and close
+ */
+
+static int fpga_sram_open(struct inode *inode, struct file *filp)
+{
+	struct fpga_sram_dev *dev; /* device information */
+
+	dev = container_of(inode->i_cdev, struct fpga_sram_dev, cdev);
+
+	filp->private_data = dev; /* for other methods */
+
+	return 0;          /* success */
+}
+
+static int fpga_sram_release(struct inode *inode, struct file *filp)
+{
+	return 0;
+}
+
+/*
+ * Data management: read and write
+ */
+
+static ssize_t fpga_sram_read(struct file *filp, char __user *buf,
+		size_t count, loff_t *f_pos)
+{
+	struct fpga_sram_dev *dev = filp->private_data; 
+	ssize_t res;
+
+	if((count + *f_pos) > dev->drv->size) count = dev->drv->size - *f_pos;
+	if(( res = copy_to_user(buf, dev->drv->start + *f_pos, count)) < 0)
+		return res;
+	return count;
+}
+
+static ssize_t fpga_sram_write(struct file *filp, const char __user *buf,
+		size_t count, loff_t *f_pos)
+{
+	struct fpga_sram_dev *dev = filp->private_data; 
+	ssize_t res;
+
+	if((count + *f_pos) > dev->drv->size) count = dev->drv->size - *f_pos;
+	if(( res = copy_from_user(dev->drv->start + *f_pos, buf, count)) < 0)
+		return res;
+	return count;
+}
+
+/*
+ * The "extended" operations -- only seek
+ */
+
+static loff_t fpga_sram_llseek(struct file *filp, loff_t off, int whence)
+{
+	struct fpga_sram_dev *dev = filp->private_data;
+	loff_t newpos;
+
+	switch(whence) {
+	  case 0: /* SEEK_SET */
+		newpos = off;
+		break;
+
+	  case 1: /* SEEK_CUR */
+		newpos = filp->f_pos + off;
+		break;
+
+	  case 2: /* SEEK_END */
+		newpos = dev->drv->size + off;
+		break;
+
+	  default: /* can't happen */
+		return -EINVAL;
+	}
+	if ( newpos >= dev->drv->size) return -EINVAL;
+	if (newpos < 0) return -EINVAL;
+	filp->f_pos = newpos;
+	return newpos;
+}
+
+
+
+static struct file_operations fpga_sram_fops = {
+	.owner =    THIS_MODULE,
+	.llseek =   fpga_sram_llseek,
+	.read =     fpga_sram_read,
+	.write =    fpga_sram_write,
+	.open =     fpga_sram_open,
+	.release =  fpga_sram_release,
+};
+
+/*
+ * Finally, the module stuff
+ */
+
+/*
+ * The cleanup function is used to handle initialization failures as well.
+ * Thefore, it must be careful to work correctly even if some of the items
+ * have not been initialized
+ */
+static int __exit fpga_sram_destroy(struct platform_device *pdev)
+{
+	int i;
+	struct fpga_sram_drv *drv = platform_get_drvdata(pdev);
+	dev_t devno = MKDEV(drv->major, fpga_sram_minor);
+
+	/* Get rid of our char dev entries */
+	if(drv->devices) {
+		for (i = 0; i < drv->devs; i++) {
+			cdev_del(&drv->devices[i].cdev);
+		}
+		kfree(drv->devices);
+	}
+
+	/* cleanup_module is never called if registering failed */
+	unregister_chrdev_region(devno, drv->devs);
+	kfree(drv->devices);
+
+	return 0;
+}
+
+
+/*
+ * Set up the char_dev structure for this device.
+ */
+static void fpga_sram_setup_cdev(struct fpga_sram_dev *dev, int index)
+{
+	int err, devno = MKDEV(dev->drv->major, fpga_sram_minor + index);
+    
+	cdev_init(&dev->cdev, &fpga_sram_fops);
+	dev->cdev.owner = THIS_MODULE;
+	dev->cdev.ops = &fpga_sram_fops;
+	err = cdev_add (&dev->cdev, devno, 1);
+	/* Fail gracefully if need be */
+	if (err)
+		pr_info("Error %d adding fpga_sram%d", err, index);
+}
+
+
+static int fpga_sram_probe(struct platform_device *pdev)
+{
+	struct fpga_sram_drv *drv;
+	struct resource *fmem;
+
+	dev_t dev = 0;
+	int result;
+	int i;
+
+        /* 
+	 * allocate the devices -- we can't have them static, as the number
+	 * can be specified at load time
+	 */
+	drv = kzalloc(sizeof(*drv), GFP_KERNEL);
+	if(!drv) {
+		result = -ENOMEM;
+		goto drv_mem_err;
+	}
+	drv->devs = fpga_sram_nr_devs;
+
+	drv->devices = kzalloc(drv->devs * sizeof(*drv->devices), GFP_KERNEL);
+	if (!drv->devices) {
+		result = -ENOMEM;
+		goto dev_mem_err;  /* Make this more graceful */
+	}
+
+	platform_set_drvdata(pdev, drv);
+
+	/*
+	 * Get a range of minor numbers to work with, asking for a dynamic
+	 * major unless directed otherwise at load time.
+	 */
+	if (fpga_sram_major) {
+		dev = MKDEV(fpga_sram_major, fpga_sram_minor);
+		result = register_chrdev_region(dev, drv->devs, "fpga_sram");
+		drv->major = fpga_sram_major;
+	} else {
+		result = alloc_chrdev_region(&dev, fpga_sram_minor,
+				drv->devs, "fpga_sram");
+		drv->major = MAJOR(dev);
+	}
+	if (result < 0) {
+		dev_warn(&pdev->dev, "can't get major %d\n", fpga_sram_major);
+		goto major_err;
+	}
+
+	fmem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if(!fmem) {
+		result = -ENXIO;
+		dev_warn(&pdev->dev, "No memory to work with\n");
+		goto res_err;
+	}
+
+	drv->size = fmem->end - fmem->start + 1;
+
+#if 0
+	if(!request_mem_region(fmem->start, drv->size, "fpga_sram")) {
+		dev_warn(&pdev->dev, "can't request mem_region");
+		goto res_err;
+	}
+#endif
+
+	drv->start = ioremap(fmem->start, drv->size);
+	if(!drv->start) {
+		dev_warn(&pdev->dev, "Can't allocate resource (%i)\n", result);
+		goto res_err;
+	}
+
+	for(i=0; i< drv->devs; i++) {
+		drv->devices[i].drv = drv;
+		fpga_sram_setup_cdev(&drv->devices[i], i);
+	}
+
+	return 0; /* succeed */
+
+	release_mem_region(fmem->start, drv->size);
+res_err:
+	unregister_chrdev_region(dev, drv->devs);
+major_err:
+	kfree(drv->devices);
+dev_mem_err:
+	kfree(drv);
+drv_mem_err:
+	return result;
+}
+
+static struct platform_driver fpga_sram_driver = {
+	.driver = {
+		.name = "fpga_sram",
+		.owner = THIS_MODULE,
+	},
+	.remove = __exit_p(fpga_sram_destroy),
+};
+
+static int __init fpga_sram_init_module(void) {
+	return platform_driver_probe(&fpga_sram_driver, fpga_sram_probe);
+}
+
+static void __exit fpga_sram_cleanup_module(void) {
+	platform_driver_unregister(&fpga_sram_driver);
+}
+
+module_init(fpga_sram_init_module);
+module_exit(fpga_sram_cleanup_module);
-- 
1.7.3.3

